#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
* My Emacs Configuration
** About
It's built using [[http://orgmode.org][Org mode]]'s [[http://orgmode.org/manual/Extracting-source-code.html#Extracting-source-code][tangling functionality]].

My entire Emacs configuration is thus written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style,
and is contained entirely in this file.

*** Requirements
- [[https://git-scm.com/]]
- npm
- python
- [[https://github.com/ggreer/the_silver_searcher]]
- https://pypi.org/project/pip/
- [[https://virtualenv.pypa.io/en/latest/]]



Copyright 2021 Xairi Valdivia.

Any external/third party works included in this work are licensed under
their own licenses - refer to the submodules or packages for more
information

** Configure Elpaca
#+BEGIN_SRC emacs-lisp
  (defvar elpaca-installer-version 0.7)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                   ,@(when-let ((depth (plist-get order :depth)))
                                                       (list (format "--depth=%d" depth) "--no-single-branch"))
                                                   ,(plist-get order :repo) ,repo))))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (setq package-enable-at-startup nil)

  ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable use-package :ensure support for Elpaca.
  (elpaca-use-package-mode))
#+END_SRC

* Visual
** Themes
all-the-icons package
- https://github.com/domtronn/all-the-icons.el
Run:
M-x: all-the-icons-install-fonts

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t :demand t)
#+END_SRC

Doom Theme
- https://github.com/hlissner/emacs-doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes :ensure t :demand t :config (load-theme 'doom-city-lights))
#+END_SRC

Kaolin Theme
#+BEGIN_SRC emacs-lisp
  (use-package kaolin-themes :ensure t :demand t)
#+END_SRC

Doom modeline
- https://github.com/hlissner/emacs-doom-themes
  Run:  M-x: nerd-icons-install-fonts
 #+BEGIN_SRC emacs-lisp
   (use-package doom-modeline
     :ensure t
     :init (doom-modeline-mode 1))
   (setq doom-modeline-project-detection 'project)
   (setq doom-modeline-major-mode-color-icon t)
   (setq doom-modeline-buffer-encoding t) ;; Whether display the buffer encoding.
   (setq doom-modeline-lsp t)
   (setq doom-modeline-env-version t)
#+END_SRC

* Basic settings
** General
Do not show startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

Hide toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

Hide scrollbar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :demand t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

Stop creating ~ files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

Enable several modes globally
#+BEGIN_SRC emacs-lisp
  (winner-mode t)
  (column-number-mode)
#+END_SRC

ido-mode configuration
- https://www.gnu.org/software/emacs/manual/html_mono/ido.html
- https://www.masteringemacs.org/article/introduction-to-ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (ido-mode t)
#+END_SRC

Don’t bother confirming killing processes and don’t let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
  (use-package files
    :ensure nil
    :config
      (setq confirm-kill-processes nil
      make-backup-files nil))
#+END_SRC

Ediff configuration
#+BEGIN_SRC emacs-lisp
  (use-package ediff
    :ensure nil
    :config
      (setq ediff-split-window-function 'split-window-horizontally)
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      (setq ediff-diff-options "-w"))
#+END_SRC

Change all prompts to y or n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Set global font and size
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font"))
  (set-face-attribute 'default t :font "FiraCode Nerd Font")
  (set-face-attribute 'default nil :height 80)
#+END_SRC

Hydra
- https://github.com/abo-abo/hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure hydra
    :demand t
    :init
    (global-set-key
    (kbd "C-x t")
        (defhydra toggle (:color blue)
          "toggle"
          ("a" abbrev-mode "abbrev")
          ("s" flyspell-mode "flyspell")
          ("d" toggle-debug-on-error "debug")
          ("c" fci-mode "fCi")
          ("f" auto-fill-mode "fill")
          ("t" toggle-truncate-lines "truncate")
          ("w" whitespace-mode "whitespace")
          ("q" nil "cancel")))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
         ("l" (or )rg-capture-goto-last-stored "Last Capture"))
     ))
#+END_SRC
*** Git
Magit
- https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :demand t
    :init
    (progn
      (bind-key "C-x g" 'magit-status))
    :commands (magit-status magit-get-current-branch)
    :custom (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+END_SRC

** Code edition
Hightlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Replace Selection
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

Show matching parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

Disable the electric indent mode
#+BEGIN_SRC emacs_list
  (electric-indent-mode -1)
#+END_SRC

Rainbow delimiters
- https://github.com/Fanael/rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
      (setq rainbow-delimiters-max-face-count 9))
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Replace keywords with symbols
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

Font-lock annotations like TODO in source code
- https://github.com/tarsius/hl-todo
#+BEGIN_SRC emacs-lisp
  (setq hl-todo-keyword-faces
        '(("TODO"   . "#FF0000")
          ("FIXME"  . "#FF0000")
          ("DEBUG"  . "#A020F0")
          ("GOTCHA" . "#FF4500")
          ("STUB"   . "#1E90FF")))

  (use-package hl-todo :ensure t :demand t)

  (eval-after-load 'hl-todo '(global-hl-todo-mode 1))
#+END_SRC

Display the current function name in the mode line
#+BEGIN_SRC emacs-lisp
  (which-function-mode 1)
#+END_SRC

Expand the marked region in semantic increments (negative prefix to reduce region)
- https://github.com/magnars/expand-region.el
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC

No tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Replace TAB with 4 spaces
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Set aggressive idennt mode
- https://github.com/Malabarba/aggressive-indent-mode
  #+BEGIN_SRC emacs-lisp
    ;; (use-package aggressive-indent
    ;;   :ensure t
    ;;   :demand t
    ;;   :config
    ;;   (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
  #+END_SRC

autocomplete parentheses
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC

Remap c-z to undo
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo)
#+END_SRC

Replace selection
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

Cleanup whitespace on save
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC

Highlight indent guides
- https://github.com/DarthFennec/highlight-indent-guides
#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
  :ensure t
  :hook ((prog-mode text-mode conf-mode) . highlight-indent-guides-mode)
  :init
    (setq highlight-indent-guides-method 'column)
  :config
    (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces))
#+END_SRC

Avy
Used jumping to visible text using a char-based decision tree
- https://github.com/abo-abo/avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char)) ;; changed from char as per jcs
#+END_SRC

Yasnippet
- https://github.com/joaotavora/yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :demand t
    :init
    (yas-global-mode 1))
  (setq yas-snippet-dirs
        '("~/.emacs.d/snippets"))
#+END_SRC
