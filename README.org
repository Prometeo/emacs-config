#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
* My Emacs Configuration
** About
It's built using [[http://orgmode.org][Org mode]]'s [[http://orgmode.org/manual/Extracting-source-code.html#Extracting-source-code][tangling functionality]].

My entire Emacs configuration is thus written in a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style,
and is contained entirely in this file.

*** Requirements
- [[https://git-scm.com/]]
- npm
- python
- [[https://github.com/ggreer/the_silver_searcher]]
- https://pypi.org/project/pip/
- [[https://virtualenv.pypa.io/en/latest/]]

*** License and copyright

Copyright 2021 Xairi Valdivia.

Any external/third party works included in this work are licensed under
their own licenses - refer to the submodules or packages for more
information.

* Visual
** Themes
all-the-icons package
- https://github.com/domtronn/all-the-icons.el
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

Doom Theme
- https://github.com/hlissner/emacs-doom-themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-one))
#+END_SRC

Doom modeline
- https://github.com/seagle0128/doom-modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+END_SRC

* Basic settings
** General
Do not show startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

Hide toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

Hide scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC

ido-mode configuration
- https://www.gnu.org/software/emacs/manual/html_mono/ido.html
- https://www.masteringemacs.org/article/introduction-to-ido-mode
#+BEGIN_SRC emacs-lisp
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)
(ido-mode t)
#+END_SRC

Don’t bother confirming killing processes and don’t let backup~ files scatter around
#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :config
    (setq confirm-kill-processes nil
        make-backup-files nil))
#+END_SRC

Ediff configuration
#+BEGIN_SRC emacs-lisp
(use-package ediff
  :ensure nil
  :config
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-diff-options "-w"))
#+END_SRC

change all prompts to y or n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Code edition
Hightlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

Replace Selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

Show matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Rainbow delimiters
- https://github.com/Fanael/rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
    (setq rainbow-delimiters-max-face-count 9))
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC

Replace keywords with symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)
#+END_SRC

Font-lock annotations like TODO in source code
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :ensure t
  :config
    (setq hl-todo-highlight-punctuation ":"
      hl-todo-keyword-faces
      `(("TODO"       warning bold)
        ("FIXME"      error bold)
        ("HACK"       font-lock-constant-face bold)
        ("REVIEW"     font-lock-keyword-face bold)
        ("NOTE"       success bold)
        ("DEPRECATED" font-lock-doc-face bold))))

(global-hl-todo-mode 1)
#+END_SRC

Display the current function name in the mode line
#+BEGIN_SRC emacs-lisp
(which-function-mode 1)
#+END_SRC


Delete all the whitespace when you hit backspace or delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config
    (global-hungry-delete-mode))
#+END_SRC

Expand the marked region in semantic increments (negative prefix to reduce region)
- https://github.com/magnars/expand-region.el
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

No tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Replace TAB with 4 spaces
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Set aggressive idennt mode
- https://github.com/Malabarba/aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :ensure t
  :config
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC

autocomplete parentheses
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

autocomplete parentheses
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

Remap c-z to undo
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-z") 'undo)
#+END_SRC

Replace selection
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

Cleanup whitespace on save
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC

Highlight indent guides
- https://github.com/DarthFennec/highlight-indent-guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :ensure t
  :hook ((prog-mode text-mode conf-mode) . highlight-indent-guides-mode)
  :init
    (setq highlight-indent-guides-method 'column)
  :config
    (add-hook 'focus-in-hook #'highlight-indent-guides-auto-set-faces))
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))
(setq yas-snippet-dirs
  '("~/.emacs.d/snippets"))
(yas-global-mode 1)
#+END_SRC
* Hydra
- https://github.com/abo-abo/hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
    :ensure hydra
    :init
    (global-set-key
    (kbd "C-x t")
        (defhydra toggle (:color blue)
          "toggle"
          ("a" abbrev-mode "abbrev")
          ("s" flyspell-mode "flyspell")
          ("d" toggle-debug-on-error "debug")
          ("c" fci-mode "fCi")
          ("f" auto-fill-mode "fill")
          ("t" toggle-truncate-lines "truncate")
          ("w" whitespace-mode "whitespace")
          ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline
       ( :pre (linum-mode 1)
          :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
         ("l" (or )rg-capture-goto-last-stored "Last Capture"))

     ))

(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil)

  ("<mouse-1>" mc/add-cursor-on-click)
  ("<down-mouse-1>" ignore)
  ("<drag-mouse-1>" ignore))
#+END_SRC
* Git
** Magit
- https://github.com/magit/magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (progn
  (bind-key "C-x g" 'magit-status)
  ))
#+END_SRC

** git-gutter
- https://github.com/emacsorphanage/git-gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter
    :ensure t
    :init
      (global-git-gutter-mode +1))

  (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)
  (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
    :hint nil)
  "
  Git gutter:
  _j_: next hunk        _s_tage hunk     _q_uit
  _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
  ^ ^                   _p_opup hunk
  _h_: first hunk
  _l_: last hunk        set start _R_evision
"
  ("j" git-gutter:next-hunk)
  ("k" git-gutter:previous-hunk)
  ("h" (progn (goto-char (point-min))
              (git-gutter:next-hunk 1)))
  ("l" (progn (goto-char (point-min))
              (git-gutter:previous-hunk 1)))
  ("s" git-gutter:stage-hunk)
  ("r" git-gutter:revert-hunk)
  ("p" git-gutter:popup-hunk)
  ("R" git-gutter:set-start-revision)
  ("q" nil :color blue)
  ("Q" (progn (git-gutter-mode -1)
              ;; git-gutter-fringe doesn't seem to
              ;; clear the markup right away
              (sit-for 0.1)
              (git-gutter:clear))
       :color blue))
#+END_SRC

** Time machine
- https://github.com/emacsmirror/git-timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t)
#+END_SRC

** gitignore
Gitignore mode
- https://github.com/magit/git-modes
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :ensure t)
#+END_SRC
Gitignore templates
- https://github.com/xuchunyang/gitignore-templates.el
#+BEGIN_SRC emacs-lisp
(use-package gitignore-templates
  :ensure t)
#+END_SRC
* Projectile
- https://github.com/bbatsov/projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
      :ensure t
      :bind ("C-c p" . projectile-command-map)
      :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy)
      (setq projectile-globally-ignored-directories
      (cl-union projectile-globally-ignored-directories
      '(".git"
      "node_modules"
      "venv")))
      (setq projectile-globally-ignored-files
          (cl-union projectile-globally-ignored-files
              '(".DS_Store"
              "*.gz"
              "*.pyc"
              "*.png"
              "*.jpg"
              "*.jar"
              "*.svg"
              "*.tgz"
              "*.zip")))
)
#+END_SRC
* Treemacs
Treemacs configuration
- https://github.com/Alexander-Miller/treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
    treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)
            (treemacs-follow-mode -1)
            (treemacs-filewatch-mode t))

            :bind
            (:map global-map
            ([f8]        . treemacs)
            ([f9]        . treemacs-projectile)
            ("M-0"       . treemacs-select-window)
            ("C-c 1"     . treemacs-delete-other-windows))
)
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+END_SRC
* Windows Management
** Ace-window
- https://github.com/abo-abo/ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
    :ensure t)
(global-set-key (kbd "M-o") 'ace-window)
(setq aw-background nil)
(defvar aw-dispatch-alist
  '((?x aw-delete-window "Delete Window")
    (?m aw-swap-window "Swap Windows")
    (?M aw-move-window "Move Window")
    (?c aw-copy-window "Copy Window")
    (?j aw-switch-buffer-in-window "Select Buffer")
    (?n aw-flip-window)
    (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
    (?c aw-split-window-fair "Split Fair Window")
    (?v aw-split-window-vert "Split Vert Window")
    (?b aw-split-window-horz "Split Horz Window")
    (?o delete-other-windows "Delete Other Windows")
    (?? aw-show-dispatch-help))
  "List of actions for `aw-dispatch-default'.")
#+END_SRC
